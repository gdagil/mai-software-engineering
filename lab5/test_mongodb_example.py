#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MongoDB —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è Lab4
–ó–∞–ø—É—Å–∫: python test_mongodb_example.py
"""

import requests
import json
from datetime import datetime
from typing import Optional, Dict, List, Any
import logging
from dataclasses import dataclass

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class TestConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    api_base: str = "http://localhost:8000"
    planning_service_base: str = "http://localhost:8081"
    username: str = "admin"
    password: str = "secret"
    headers: Dict[str, str] = None
    
    def __post_init__(self):
        if self.headers is None:
            self.headers = {"Content-Type": "application/json"}

class APIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API"""
    
    def __init__(self, config: TestConfig):
        self.config = config
        self.token: Optional[str] = None
        self.auth_headers: Optional[Dict[str, str]] = None
    
    def authenticate(self) -> bool:
        """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
        login_data = {
            "username": self.config.username,
            "password": self.config.password
        }
        
        try:
            response = requests.post(
                f"{self.config.api_base}/auth/login",
                json=login_data,
                headers=self.config.headers,
                timeout=30
            )
            
            if response.status_code == 200:
                self.token = response.json()["access_token"]
                self.auth_headers = {
                    "Authorization": f"Bearer {self.token}",
                    "Content-Type": "application/json"
                }
                logger.info("üîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {response.status_code}")
                logger.error(response.text)
                return False
                
        except requests.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
            return False
    
    def make_request(self, method: str, endpoint: str, **kwargs) -> requests.Response:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        if not self.auth_headers and endpoint != "/auth/login":
            if not self.authenticate():
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        
        url = f"{self.config.api_base}{endpoint}"
        headers = kwargs.pop('headers', self.auth_headers or self.config.headers)
        
        try:
            response = requests.request(
                method=method,
                url=url,
                headers=headers,
                timeout=30,
                **kwargs
            )
            return response
        except requests.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ {method} {url}: {e}")
            raise

class MongoDBTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MongoDB —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, api_client: APIClient):
        self.api = api_client
        self.created_transactions: List[str] = []
    
    def create_test_transaction(self, transaction_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ MongoDB...")
        
        response = self.api.make_request(
            "POST",
            "/api/transactions-mongo",
            json=transaction_data
        )
        
        if response.status_code == 200:
            created_transaction = response.json()
            transaction_id = created_transaction["_id"]
            self.created_transactions.append(transaction_id)
            
            logger.info(f"‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞! ID: {transaction_id}")
            logger.info(f"   –°—É–º–º–∞: {created_transaction['amount']} —Ä—É–±.")
            logger.info(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {created_transaction['category']}")
            return created_transaction
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {response.status_code}")
            logger.error(response.text)
            return None
    
    def get_all_transactions(self) -> Optional[List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π"""
        logger.info("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏–∑ MongoDB...")
        
        response = self.api.make_request("GET", "/api/transactions-mongo")
        
        if response.status_code == 200:
            transactions = response.json()
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {len(transactions)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            for t in transactions[:3]:
                logger.info(f"   - {t['type']}: {t['amount']} —Ä—É–±. ({t['category']})")
            
            return transactions
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {response.status_code}")
            logger.error(response.text)
            return None
    
    def filter_transactions_by_category(self, category: str, limit: int = 5) -> Optional[List[Dict[str, Any]]]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        logger.info(f"üîç –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'...")
        
        response = self.api.make_request(
            "GET",
            f"/api/transactions-mongo?category={category}&limit={limit}"
        )
        
        if response.status_code == 200:
            filtered_transactions = response.json()
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}': {len(filtered_transactions)}")
            
            for t in filtered_transactions:
                logger.info(f"   - {t['description']}: {t['amount']} —Ä—É–±.")
            
            return filtered_transactions
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}")
            logger.error(response.text)
            return None
    
    def update_transaction(self, transaction_id: str, update_data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        logger.info(f"‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ {transaction_id}...")
        
        response = self.api.make_request(
            "PUT",
            f"/api/transactions-mongo/{transaction_id}",
            json=update_data
        )
        
        if response.status_code == 200:
            updated_transaction = response.json()
            logger.info("‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            logger.info(f"   –ù–æ–≤–∞—è —Å—É–º–º–∞: {updated_transaction['amount']} —Ä—É–±.")
            logger.info(f"   –ù–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {updated_transaction['description']}")
            return updated_transaction
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {response.status_code}")
            logger.error(response.text)
            return None
    
    def get_plan_analytics(self, plan_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –ø–æ –ø–ª–∞–Ω—É"""
        logger.info(f"üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–ª–∞–Ω—É {plan_id}...")
        
        response = self.api.make_request(
            "GET",
            f"/api/transactions-mongo/plan/{plan_id}/analytics"
        )
        
        if response.status_code == 200:
            analytics = response.json()
            logger.info("‚úÖ –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!")
            logger.info(f"   –û–±—â–∏–π –¥–æ—Ö–æ–¥: {analytics['total_income']} —Ä—É–±.")
            logger.info(f"   –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {analytics['total_expenses']} —Ä—É–±.")
            logger.info(f"   –ë–∞–ª–∞–Ω—Å: {analytics['balance']} —Ä—É–±.")
            logger.info(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {analytics['transaction_count']}")
            return analytics
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {response.status_code}")
            logger.error(response.text)
            return None
    
    def run_full_test(self):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MongoDB —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
        logger.info("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MongoDB —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        transaction_data = {
            "plan_id": 1,
            "type": "expense",
            "amount": 150.0,
            "description": "–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤",
            "category": "food",
            "user_id": "admin"
        }
        
        # 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        created_transaction = self.create_test_transaction(transaction_data)
        if not created_transaction:
            return False
        
        transaction_id = created_transaction["_id"]
        
        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        all_transactions = self.get_all_transactions()
        if all_transactions is None:
            return False
        
        # 3. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        food_transactions = self.filter_transactions_by_category("food")
        if food_transactions is None:
            return False
        
        # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        update_data = {
            "amount": 200.0,
            "description": "–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
        }
        updated_transaction = self.update_transaction(transaction_id, update_data)
        if not updated_transaction:
            return False
        
        # 5. –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –ø–ª–∞–Ω—É
        analytics = self.get_plan_analytics(1)
        if not analytics:
            return False
        
        # 6. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å PostgreSQL
        self.compare_with_postgresql(len(all_transactions))
        
        logger.info("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MongoDB —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
    
    def compare_with_postgresql(self, mongodb_count: int):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å PostgreSQL —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏"""
        logger.info("üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å PostgreSQL —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏...")
        
        try:
            response = self.api.make_request("GET", "/api/transactions")
            
            if response.status_code == 200:
                postgres_transactions = response.json()
                postgres_count = len(postgres_transactions)
                
                logger.info(f"üìä PostgreSQL —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {postgres_count}")
                logger.info(f"üìä MongoDB —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {mongodb_count}")
                logger.info(f"üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {postgres_count + mongodb_count}")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è PostgreSQL —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {response.status_code}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Å PostgreSQL: {e}")

class HealthChecker:
    """–ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
    
    def __init__(self, config: TestConfig):
        self.config = config
    
    def check_api_gateway(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ API Gateway"""
        try:
            response = requests.get(f"{self.config.api_base}/health", timeout=10)
            if response.status_code == 200:
                logger.info("‚úÖ API Gateway: OK")
                return True
            else:
                logger.error("‚ùå API Gateway: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
        except requests.RequestException as e:
            logger.error(f"‚ùå API Gateway: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
            return False
    
    def check_planning_service(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Planning Service"""
        try:
            response = requests.get(f"{self.config.planning_service_base}/health", timeout=10)
            if response.status_code == 200:
                try:
                    health_data = response.json()
                    logger.info("‚úÖ Planning Service: OK")
                    logger.info(f"   PostgreSQL: {health_data.get('database_mode', 'unknown')}")
                    logger.info(f"   MongoDB: {health_data.get('mongodb_status', 'unknown')}")
                except json.JSONDecodeError:
                    logger.info("‚úÖ Planning Service: OK (–ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")
                return True
            else:
                logger.error("‚ùå Planning Service: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
        except requests.RequestException as e:
            logger.error(f"‚ùå Planning Service: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - {e}")
            return False
    
    def check_database_health(self) -> Dict[str, str]:
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î"""
        try:
            response = requests.get(f"{self.config.planning_service_base}/db/health", timeout=10)
            if response.status_code == 200:
                try:
                    db_health = response.json()
                    logger.info("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î:")
                    logger.info(f"   PostgreSQL: {db_health.get('postgresql', 'unknown')}")
                    logger.info(f"   MongoDB: {db_health.get('mongodb', 'unknown')}")
                    return db_health
                except json.JSONDecodeError:
                    logger.info("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ë–î: OK (–ø—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç)")
                    return {"status": "ok"}
        except requests.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
            return {"error": str(e)}
    
    def run_health_checks(self) -> bool:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        logger.info("üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        api_ok = self.check_api_gateway()
        planning_ok = self.check_planning_service()
        
        if api_ok and planning_ok:
            self.check_database_health()
            return True
        else:
            logger.error("‚ùå –û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MongoDB —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
    logger.info("üìã –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã: docker-compose up")
    logger.info("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    config = TestConfig()
    health_checker = HealthChecker(config)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
    if not health_checker.run_health_checks():
        logger.error("‚ùå –°–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return False
    
    logger.info("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ MongoDB
    api_client = APIClient(config)
    mongodb_tester = MongoDBTester(api_client)
    
    if not api_client.authenticate():
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return False
    
    success = mongodb_tester.run_full_test()
    
    if success:
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–∞–º–∏.")
    
    return success

if __name__ == "__main__":
    main() 