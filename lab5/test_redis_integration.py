#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Redis –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import requests
import json
import time
import sys

API_GATEWAY_URL = "http://localhost:8000"
PLANNING_SERVICE_URL = "http://localhost:8081"

def get_token():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞"""
    login_data = {
        "username": "admin",
        "password": "secret"
    }
    
    try:
        response = requests.post(f"{API_GATEWAY_URL}/auth/login", json=login_data)
        if response.status_code == 200:
            return response.json()["access_token"]
        else:
            print(f"‚ùå Failed to get token: {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå Error getting token: {e}")
        return None

def test_redis_connection(token):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Redis"""
    headers = {"Authorization": f"Bearer {token}"}
    
    try:
        response = requests.get(f"{PLANNING_SERVICE_URL}/cache/health", headers={"Authorization": f"Bearer {token}", "X-User": "admin"})
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Redis connection: {'connected' if data['redis_connected'] else 'disconnected'}")
            print(f"‚úÖ Cache enabled: {data['cache_enabled']}")
            return data['redis_connected']
        else:
            print(f"‚ùå Cache health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Error checking Redis: {e}")
        return False

def test_caching_performance(token):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    headers = {"Authorization": f"Bearer {token}"}
    cache_headers = {"Authorization": f"Bearer {token}", "X-User": "admin"}
    
    print("\nüß™ Testing caching performance...")
    
    # –û—á–∏—â–∞–µ–º –∫–µ—à —á–µ—Ä–µ–∑ Planning Service
    requests.post(f"{PLANNING_SERVICE_URL}/cache/clear", headers=cache_headers)
    
    # –¢–µ—Å—Ç –±–µ–∑ –∫–µ—à–∞ (–ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å) —á–µ—Ä–µ–∑ API Gateway
    start_time = time.time()
    response = requests.get(f"{API_GATEWAY_URL}/api/plans", headers=headers)
    no_cache_time = time.time() - start_time
    
    if response.status_code == 200:
        print(f"‚úÖ First request (no cache): {no_cache_time:.3f}s")
    else:
        print(f"‚ùå First request failed: {response.status_code}")
        return False
    
    # –¢–µ—Å—Ç —Å –∫–µ—à–µ–º (–≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å)
    start_time = time.time()
    response = requests.get(f"{API_GATEWAY_URL}/api/plans", headers=headers)
    cache_time = time.time() - start_time
    
    if response.status_code == 200:
        print(f"‚úÖ Second request (cached): {cache_time:.3f}s")
        speedup = no_cache_time / cache_time if cache_time > 0 else float('inf')
        print(f"üöÄ Cache speedup: {speedup:.2f}x")
        
        if speedup > 1.5:
            print("‚úÖ Caching is working effectively!")
        else:
            print("‚ö†Ô∏è  Cache speedup is lower than expected")
        
        return True
    else:
        print(f"‚ùå Second request failed: {response.status_code}")
        return False

def test_cache_patterns(token):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    headers = {"Authorization": f"Bearer {token}"}
    
    print("\nüß™ Testing cache patterns...")
    
    # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º Read-Through —á–µ—Ä–µ–∑ API Gateway
    print("Testing Read-Through pattern...")
    response = requests.get(f"{API_GATEWAY_URL}/api/plans", headers=headers)
    if response.status_code == 200:
        print("‚úÖ Read-Through: Data loaded from DB and cached")
    
    # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º Write-Through (—Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞) —á–µ—Ä–µ–∑ API Gateway
    print("Testing Write-Through pattern...")
    plan_data = {
        "title": "Cache Test Plan",
        "description": "Plan for testing cache patterns",
        "planned_income": 1000.0,
        "planned_expenses": 800.0
    }
    
    response = requests.post(f"{API_GATEWAY_URL}/api/plans", 
                           json=plan_data, headers=headers)
    if response.status_code == 200:
        plan = response.json()
        print("‚úÖ Write-Through: Plan created in DB and cached")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞–Ω –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞
        response = requests.get(f"{API_GATEWAY_URL}/api/plans/{plan['id']}", 
                              headers=headers)
        if response.status_code == 200:
            print("‚úÖ Read from cache: Plan available immediately")
        
        return plan['id']
    else:
        print(f"‚ùå Write-Through failed: {response.status_code}")
        print(f"Response: {response.text}")
        return None

def test_cache_invalidation(token, plan_id):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–µ—à–∞"""
    if not plan_id:
        return
        
    headers = {"Authorization": f"Bearer {token}"}
    
    print("\nüß™ Testing cache invalidation...")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω (–¥–æ–ª–∂–Ω–æ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–µ—à) —á–µ—Ä–µ–∑ API Gateway
    update_data = {
        "title": "Updated Cache Test Plan",
        "planned_income": 1200.0
    }
    
    response = requests.put(f"{API_GATEWAY_URL}/api/plans/{plan_id}",
                          json=update_data, headers=headers)
    if response.status_code == 200:
        print("‚úÖ Plan updated successfully")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∏–¥–Ω—ã
        response = requests.get(f"{API_GATEWAY_URL}/api/plans/{plan_id}",
                              headers=headers)
        if response.status_code == 200:
            updated_plan = response.json()
            if updated_plan['title'] == "Updated Cache Test Plan":
                print("‚úÖ Cache invalidation: Updated data is visible")
            else:
                print("‚ùå Cache invalidation failed: Old data still cached")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞–Ω
        requests.delete(f"{API_GATEWAY_URL}/api/plans/{plan_id}", headers=headers)

def main():
    print("üîÑ Testing Redis caching integration...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = get_token()
    if not token:
        print("‚ùå Cannot proceed without authentication token")
        sys.exit(1)
    
    print(f"‚úÖ Got authentication token")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
    redis_ok = test_redis_connection(token)
    if not redis_ok:
        print("‚ùå Redis is not available, skipping cache tests")
        sys.exit(1)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    cache_performance_ok = test_caching_performance(token)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è
    plan_id = test_cache_patterns(token)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—é –∫–µ—à–∞
    test_cache_invalidation(token, plan_id)
    
    print("\n‚úÖ Redis caching integration test completed!")
    
    if cache_performance_ok:
        print("üéâ All tests passed! Redis caching is working correctly.")
    else:
        print("‚ö†Ô∏è  Some tests failed. Check the logs for details.")

if __name__ == "__main__":
    main() 