.PHONY: help build up down logs clean test test-unit test-integration test-all test-smoke test-api save-openapi db-migrate db-upgrade env-check

help:
	@echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
	@echo "  build        - –°–æ–±—Ä–∞—Ç—å Docker –æ–±—Ä–∞–∑—ã"
	@echo "  up           - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
	@echo "  down         - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
	@echo "  logs         - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"
	@echo "  clean        - –£–¥–∞–ª–∏—Ç—å –æ–±—Ä–∞–∑—ã –∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
	@echo "  test         - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã (pytest)"
	@echo "  test-unit    - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ unit —Ç–µ—Å—Ç—ã"
	@echo "  test-integration - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ integration —Ç–µ—Å—Ç—ã"
	@echo "  test-api     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ API —Ç–µ—Å—Ç—ã (curl)"
	@echo "  test-smoke   - –ó–∞–ø—É—Å—Ç–∏—Ç—å smoke —Ç–µ—Å—Ç—ã"
	@echo "  save-openapi - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"
	@echo "  db-migrate   - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é"
	@echo "  db-upgrade   - –ü—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏"
	@echo "  env-check    - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"

build:
	docker-compose build

up:
	docker-compose up --build

down:
	docker-compose down

logs:
	docker-compose logs -f

clean:
	docker-compose down -v --rmi all
	docker system prune -f

test:
	@echo "üß™ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ pytest..."
	@echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@sleep 5
	@export PYTHONPATH="$(shell pwd)/src/api-gateway:$(shell pwd)/src/planning-service" && \
	python -m pytest tests/ -v --tb=short

test-unit:
	@echo "üî¨ –ó–∞–ø—É—Å–∫ unit —Ç–µ—Å—Ç–æ–≤..."
	@export PYTHONPATH="$(shell pwd)/src/api-gateway:$(shell pwd)/src/planning-service" && \
	python -m pytest tests/ -v --tb=short -m "not integration"

test-integration:
	@echo "üîó –ó–∞–ø—É—Å–∫ integration —Ç–µ—Å—Ç–æ–≤..."
	@echo "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@sleep 5
	@export PYTHONPATH="$(shell pwd)/src/api-gateway:$(shell pwd)/src/planning-service" && \
	python -m pytest tests/test_integration.py -v --tb=short

test-smoke:
	@echo "üí® –ó–∞–ø—É—Å–∫ smoke —Ç–µ—Å—Ç–æ–≤..."
	@export PYTHONPATH="$(shell pwd)/src/api-gateway:$(shell pwd)/src/planning-service" && \
	python -m pytest tests/ -v --tb=short -k "health_check"

test-api:
	@echo "üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —á–µ—Ä–µ–∑ curl..."
	@echo "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
	@sleep 10
	@echo "1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:"
	curl -X POST "http://localhost:8000/auth/login" \
		-H "Content-Type: application/json" \
		-d '{"username": "admin", "password": "secret"}' | jq
	@echo "\n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–æ–≤:"
	curl http://localhost:8000/health | jq
	curl http://localhost:8080/health | jq

save-openapi:
	@echo "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ OpenAPI —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π..."
	python save_openapi.py

db-migrate:
	@echo "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏..."
	cd src/planning-service && alembic revision --autogenerate -m "$(MSG)"

db-upgrade:
	@echo "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
	cd src/planning-service && alembic upgrade head

env-check:
	@echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	@echo "1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
	@if [ -f .env ]; then \
		echo "–§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω"; \
	else \
		echo "–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ env.example –≤ .env"; \
	fi
	@echo "2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:"
	docker-compose config --quiet && echo "docker-compose.yml –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω" || echo "–û—à–∏–±–∫–∞ –≤ docker-compose.yml"
	@echo "3. –°–ø–∏—Å–æ–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:"
	@echo "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
	@echo "   - SECRET_KEY (–¥–ª—è JWT)"
	@echo "   - DATABASE_URL (–¥–ª—è PostgreSQL)" 
	@echo "   - PLANNING_SERVICE_URL (–¥–ª—è API Gateway)"
	@echo ""
	@echo "–ü–æ–¥—Ä–æ–±–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: ENVIRONMENT.md"

all: help 